// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Molecule molecule
// swagger:model Molecule
type Molecule struct {

	// asset type
	AssetType string `json:"assetType,omitempty"`

	// bids
	Bids int64 `json:"bids,omitempty"`

	// biological target
	BiologicalTarget string `json:"biologicalTarget,omitempty"`

	// contact
	Contact string `json:"contact,omitempty"`

	// data
	Data []string `json:"data"`

	// index
	// Required: true
	Index *string `json:"index"`

	// mother molecule
	MotherMolecule string `json:"motherMolecule,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// owner
	Owner string `json:"owner,omitempty"`

	// physical storage
	PhysicalStorage string `json:"physicalStorage,omitempty"`

	// sales price IP r
	SalesPriceIPR int64 `json:"salesPriceIPR,omitempty"`

	// structure
	Structure string `json:"structure,omitempty"`

	// submitter
	Submitter string `json:"submitter,omitempty"`

	// synonyms
	Synonyms []string `json:"synonyms"`

	// timestamp
	Timestamp string `json:"timestamp,omitempty"`

	// value
	Value int64 `json:"value,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this molecule
func (m *Molecule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Molecule) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *Molecule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Molecule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Molecule) UnmarshalBinary(b []byte) error {
	var res Molecule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
